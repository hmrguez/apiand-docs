"use strict";(self.webpackChunkapiand_docs=self.webpackChunkapiand_docs||[]).push([[6712],{8431:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"collaborate/add-generators","title":"Creating Generators","description":"This guide explains how to contribute to Apiand by creating new generators (implementations of the generate command. These generators enable developers to add components to their projects using the CLI.","source":"@site/docs/collaborate/add-generators.md","sourceDirName":"collaborate","slug":"/collaborate/add-generators","permalink":"/apiand-docs/docs/collaborate/add-generators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"How to add generators"},"sidebar":"tutorialSidebar","previous":{"title":"How to add new CLI parameters","permalink":"/apiand-docs/docs/collaborate/add-cli-parameters"}}');var i=t(4848),a=t(8453);const o={sidebar_label:"How to add generators"},s="Creating Generators",c={},l=[{value:"Types of Generator Contributions",id:"types-of-generator-contributions",level:2},{value:"Adding a Generator to an Existing Architecture",id:"adding-a-generator-to-an-existing-architecture",level:2},{value:"Step 1: Create the Implementation Class",id:"step-1-create-the-implementation-class",level:3},{value:"Step 2: Test Your Generator",id:"step-2-test-your-generator",level:3},{value:"Creating a New Generator Type",id:"creating-a-new-generator-type",level:2},{value:"Step 1: Define the Interface",id:"step-1-define-the-interface",level:3},{value:"Step 2: Implement the Interface",id:"step-2-implement-the-interface",level:3},{value:"Step 3: Register the Generator with the CLI",id:"step-3-register-the-generator-with-the-cli",level:3},{value:"Step 4: Add Special Options (if needed)",id:"step-4-add-special-options-if-needed",level:3},{value:"Best Practices for Generator Implementation",id:"best-practices-for-generator-implementation",level:2},{value:"Implementation Tips",id:"implementation-tips",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-generators",children:"Creating Generators"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide explains how to contribute to Apiand by creating new generators (implementations of the ",(0,i.jsx)(n.a,{href:"../components/generate",children:(0,i.jsx)(n.code,{children:"generate"})})," command. These generators enable developers to add components to their projects using the CLI."]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-generator-contributions",children:"Types of Generator Contributions"}),"\n",(0,i.jsx)(n.p,{children:"You can contribute generators in two ways:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adding a generator to an existing architecture"}),": Implement an existing ",(0,i.jsx)(n.code,{children:"IGenerate<Component>"})," interface"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Creating a completely new generator"}),": Define a new interface, implement it, and register it with the CLI"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-generator-to-an-existing-architecture",children:"Adding a Generator to an Existing Architecture"}),"\n",(0,i.jsx)(n.p,{children:"This is the simpler approach when you want to support an existing component type for a different architecture."}),"\n",(0,i.jsx)(n.h3,{id:"step-1-create-the-implementation-class",children:"Step 1: Create the Implementation Class"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to ",(0,i.jsx)(n.code,{children:"src/Apiand.TemplateEngine/Architectures/<YourArchitecture>/Commands/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Create a new class implementing an existing interface (e.g., ",(0,i.jsx)(n.code,{children:"IGenerateEntity"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Set the ",(0,i.jsx)(n.code,{children:"ArchName"})," property to your architecture's name"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Apiand.TemplateEngine.Models;\nusing Apiand.TemplateEngine.Models.Commands;\n\nnamespace Apiand.TemplateEngine.Architectures.YourArchitecture.Commands;\n\npublic class GenerateEntity : IGenerateEntity\n{\n    public string ArchName { get; set; } = YourArchUtils.Name;\n\n    public void Handle(string workingDirectory, string projectDirectory, string argument,\n        Dictionary<string, string> extraData,\n        TemplateConfiguration configuration, IMessenger messenger)\n    {\n        // Implementation logic goes here\n        string entityName = argument;\n        \n        // Find relevant projects in your architecture\n        // Create directories as needed\n        // Generate files using templates\n        // Report progress using the messenger\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-test-your-generator",children:"Step 2: Test Your Generator"}),"\n",(0,i.jsx)(n.p,{children:"Test your generator by running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet apiand generate entity YourEntityName --path /path/to/project\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-new-generator-type",children:"Creating a New Generator Type"}),"\n",(0,i.jsx)(n.p,{children:"Follow these steps to add a completely new generator type:"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-define-the-interface",children:"Step 1: Define the Interface"}),"\n",(0,i.jsxs)(n.p,{children:["Create a new interface in ",(0,i.jsx)(n.code,{children:"src/Apiand.TemplateEngine/Models/Commands/"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace Apiand.TemplateEngine.Models.Commands;\n\npublic interface IGenerateYourComponent : ICommandSpecification;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-implement-the-interface",children:"Step 2: Implement the Interface"}),"\n",(0,i.jsx)(n.p,{children:"Create an implementation in your architecture's directory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Apiand.TemplateEngine.Models;\nusing Apiand.TemplateEngine.Models.Commands;\n\nnamespace Apiand.TemplateEngine.Architectures.YourArchitecture.Commands;\n\npublic class GenerateYourComponent : IGenerateYourComponent\n{\n    public string ArchName { get; set; } = YourArchUtils.Name;\n\n    public void Handle(string workingDirectory, string projectDirectory, string argument,\n        Dictionary<string, string> extraData,\n        TemplateConfiguration configuration, IMessenger messenger)\n    {\n        // Your component generation logic here\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-register-the-generator-with-the-cli",children:"Step 3: Register the Generator with the CLI"}),"\n",(0,i.jsxs)(n.p,{children:["Modify the ",(0,i.jsx)(n.code,{children:"GenerateCommand"})," constructor in ",(0,i.jsx)(n.code,{children:"src/Apiand.Cli/Commands/GenerateCommand.cs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public GenerateCommand() : base("generate", "Add components to an existing project")\n{\n    _processor = new TemplateProcessor();\n    _messenger = new ConsoleMessenger();\n\n    RegisterComponentGenerator("service", "Add a new service to the project", typeof(IGenerateService));\n    RegisterComponentGenerator("endpoint", "Add a new endpoint to the project", typeof(IGenerateEndpoint));\n    RegisterComponentGenerator("entity", "Add a new entity to the project", typeof(IGenerateEntity));\n    \n    // Add your new generator\n    RegisterComponentGenerator("yourcomponent", "Add a new yourcomponent to the project", typeof(IGenerateYourComponent));\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-4-add-special-options-if-needed",children:"Step 4: Add Special Options (if needed)"}),"\n",(0,i.jsxs)(n.p,{children:["If your generator requires specific options, update the ",(0,i.jsx)(n.code,{children:"RegisterComponentGenerator"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'else if (commandName == "yourcomponent")\n{\n    var specialOption = new Option<string>(\n        "--special-option",\n        "Description of your special option");\n    specialOption.AddAlias("-s");\n    command.AddOption(specialOption);\n\n    command.SetHandler(\n        (name, path, specialOption) =>\n        {\n            var data = new Dictionary<string, string> { ["special-option"] = specialOption };\n            HandleGenerateComponent(name, path, commandName, implementationType, data);\n        },\n        nameArgument, pathOption, specialOption);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-generator-implementation",children:"Best Practices for Generator Implementation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Follow existing patterns"}),": Study the existing generators for guidance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use meaningful namespaces"}),": Place files in the correct architecture directory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle errors gracefully"}),": Provide clear error messages via the messenger"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document your code"}),": Add comments explaining the logic of your generator"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"}),": Verify that your generator works in various scenarios"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-tips",children:"Implementation Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"Path.Combine()"})," for cross-platform path handling"]}),"\n",(0,i.jsx)(n.li,{children:"Check for the existence of directories and files before writing"}),"\n",(0,i.jsx)(n.li,{children:"Report progress using the messenger's methods"}),"\n",(0,i.jsx)(n.li,{children:"Use relative paths in your output messages for readability"}),"\n",(0,i.jsx)(n.li,{children:"Validate user input before processing"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following this guide, you can contribute valuable generators to the Apiand project and help expand its functionality for different architectures and component types."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);