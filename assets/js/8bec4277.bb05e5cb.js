"use strict";(self.webpackChunkapiand_docs=self.webpackChunkapiand_docs||[]).push([[2493],{8195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"collaborate/add-cli-parameters","title":"How to add new cli parameters","description":"Typically when adding a new architecture type you will need to add new parameters to the CLI. This guide will show you how to do that.","source":"@site/docs/collaborate/add-cli-parameters.md","sourceDirName":"collaborate","slug":"/collaborate/add-cli-parameters","permalink":"/apiand-docs/docs/collaborate/add-cli-parameters","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"label":"How to add new CLI parameters"},"sidebar":"tutorialSidebar","previous":{"title":"How to add templates","permalink":"/apiand-docs/docs/collaborate/add-templates"}}');var o=t(4848),d=t(8453);const r={label:"How to add new CLI parameters"},s="How to add new cli parameters",i={},l=[{value:"Command options",id:"command-options",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-to-add-new-cli-parameters",children:"How to add new cli parameters"})}),"\n",(0,o.jsx)(n.p,{children:"Typically when adding a new architecture type you will need to add new parameters to the CLI. This guide will show you how to do that."}),"\n",(0,o.jsx)(n.h2,{id:"command-options",children:"Command options"}),"\n",(0,o.jsx)(n.p,{children:"The CLI uses System.CommandLine. Go to the Apiand.Cli/Commands/New, this is the command used to creating templates"}),"\n",(0,o.jsxs)(n.p,{children:["You'll need to add a new option to the command and then add that option to the handler of the command, for example, let's say you want to add a new parameter called ",(0,o.jsx)(n.code,{children:"--my-new-parameter"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'public class NewCommand : Command\n{\n    public NewCommand()\n        : base("new", "Creates a new project from a template")\n    {\n        ...\n        // Create the new option\n        var newOption = new Option<string>("--my-new-parameter", "My New Parameter");\n        newOption.AddAlias("-mnp");\n        AddOption(newOption);\n\n        // Add the new option to the handler\n        this.SetHandler(HandleCommand, outputOption, ..., newOption);\n        ...\n    }\n\n    private void HandleCommand(string output, ..., string? myNewParameter)\n    {\n        ...\n    }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then you should add the option to the CommandOptions class"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public class CommandOptions\n{\n    ...\n    public string? MyNewParameter { get; set; }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public class NewCommand : Command\n{\n    private void HandleCommand(string output, ..., string? myNewParameter)\n    {\n        ...\n        var commandOptions = new CommandOptions()\n        {\n            ...\n            MyNewParameter = myNewParameter\n        };\n        ...\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const o={},d=a.createContext(o);function r(e){const n=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);